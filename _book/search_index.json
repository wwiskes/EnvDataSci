[["spatial-data-and-maps.html", "5 Spatial Data and Maps 5.1 Spatial Data 5.2 Raster GIS in R 5.3 ggplot2 for maps 5.4 tmap 5.5 Interactive Maps 5.6 Exercises", " 5 Spatial Data and Maps Well explore the basics of simple features (sf) for building spatial datasets, then some common mapping methods: ggplot2 tmap leaflet the base plot system occasionally something else 5.1 Spatial Data To work with spatial data requires extending R to deal with it using packages. Many have been developed, but the field is starting to mature using international open GIS standards. sp (until recently, the dominant library of spatial tools) Includes functions for working with spatial data Includes spplot to create maps Also needs rgdal package for readOGR  reads spatial data frames. sf (Simple Features) ISO 19125 standard for GIS geometries Also has functions for working with spatial data, but clearer to use. Doesnt need many additional packages, though you may still need rgdal installed for some tools you want to use. Replacing sp and spplot though youll still find them in code. Well give it a try Works with ggplot2 and tmap for nice looking maps. Cheat sheet: https://github.com/rstudio/cheatsheets/raw/master/sf.pdf 5.1.0.1 simple feature geometry sfg and simple feature column sfc 5.1.1 Examples of simple geometry building in sf sf functions have the pattern st_* st means space and time See Geocomputation with R at https://geocompr.robinlovelace.net/ or https://r-spatial.github.io/sf/ for more details, but heres an example of manual feature creation of sf geometries (sfg): library(tidyverse) library(sf) library(iGIScData) [As usual, go to the relevant project, in this case generic_methods] library(sf) eyes &lt;- st_multipoint(rbind(c(1,5), c(3,5))) nose &lt;- st_point(c(2,4)) mouth &lt;- st_linestring(rbind(c(1,3),c(3, 3))) border &lt;- st_polygon(list(rbind(c(0,5), c(1,2), c(2,1), c(3,2), c(4,5), c(3,7), c(1,7), c(0,5)))) face &lt;- st_sfc(eyes, nose, mouth, border) # sfc = sf column plot(face) Figure 5.1: Building simple geometries in sf The face was a simple feature column (sfc) built from the list of sfgs. An sfc just has the one column, so is not quite like a shapefile. But it can have a coordinate referencing system CRS, and so can be mapped. Kind of like a shapefile with no other attributes than shape [westUS] 5.1.2 Building a mappable sfc from scratch CA_matrix &lt;- rbind(c(-124,42),c(-120,42),c(-120,39),c(-114.5,35), c(-114.1,34.3),c(-114.6,32.7),c(-117,32.5),c(-118.5,34),c(-120.5,34.5), c(-122,36.5),c(-121.8,36.8),c(-122,37),c(-122.4,37.3),c(-122.5,37.8), c(-123,38),c(-123.7,39),c(-124,40),c(-124.4,40.5),c(-124,41),c(-124,42)) NV_matrix &lt;- rbind(c(-120,42),c(-114,42),c(-114,36),c(-114.5,36), c(-114.5,35),c(-120,39),c(-120,42)) CA_list &lt;- list(CA_matrix); NV_list &lt;- list(NV_matrix) CA_poly &lt;- st_polygon(CA_list); NV_poly &lt;- st_polygon(NV_list) sfc_2states &lt;- st_sfc(CA_poly,NV_poly,crs=4326) # crs=4326 specifies GCS st_geometry_type(sfc_2states) ## [1] POLYGON POLYGON ## 18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE library(tidyverse) ggplot() + geom_sf(data = sfc_2states) Figure 5.2: A simple map built from scratch with hard-coded data as simple feature columns sf class Is like a shapefile: has attributes to which geometry is added, and can be used like a data frame. attributes &lt;- bind_rows(c(abb=&quot;CA&quot;, area=423970, pop=39.56e6), c(abb=&quot;NV&quot;, area=286382, pop=3.03e6)) twostates &lt;- st_sf(attributes, geometry = sfc_2states) ggplot(twostates) + geom_sf() + geom_sf_text(aes(label = abb)) Figure 5.3: Using an sf class to build a map, displaying an attribute 5.1.3 Creating features from shapefiles or tables sfs st_read reads shapefiles shapefile is an open GIS format for points, polylines, polygons You would normally have shapefiles (and all the files that go with them  .shx, etc.) stored on your computer, but well access one from the iGIScData external data folder [sierra]: library(iGIScData) library(sf) shpPath &lt;- system.file(&quot;extdata&quot;,&quot;CA_counties.shp&quot;, package=&quot;iGIScData&quot;) CA_counties &lt;- st_read(shpPath) ## Reading layer `CA_counties&#39; from data source `C:\\Users\\900008452\\Documents\\R\\win-library\\4.0\\iGIScData\\extdata\\CA_counties.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 58 features and 60 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -124.4152 ymin: 32.53427 xmax: -114.1312 ymax: 42.00952 ## Geodetic CRS: WGS 84 plot(CA_counties) st_as_sf converts data frames using coordinates read from x and y variables, with crs set to coordinate system (4326 for GCS) sierraFebpts &lt;- st_as_sf(sierraFeb, coords = c(&quot;LONGITUDE&quot;, &quot;LATITUDE&quot;), crs=4326) plot(sierraFebpts) [air_quality] library(tidyverse) library(sf) library(iGIScData) censusCentroids &lt;- st_centroid(BayAreaTracts) TRI_sp &lt;- st_as_sf(TRI_2017_CA, coords = c(&quot;LONGITUDE&quot;, &quot;LATITUDE&quot;), crs=4326) # simple way to specify coordinate reference bnd &lt;- st_bbox(censusCentroids) ggplot() + geom_sf(data = BayAreaCounties, aes(fill = NAME)) + geom_sf(data = censusCentroids) + geom_sf(data = CAfreeways, color = &quot;grey&quot;) + geom_sf(data = TRI_sp, color = &quot;yellow&quot;) + coord_sf(xlim = c(bnd[1], bnd[3]), ylim = c(bnd[2], bnd[4])) + labs(title=&quot;Bay Area Counties, Freeways and Census Tract Centroids&quot;) Figure 5.4: ggplot map of Bay Area TRI sites, census centroids, freeways 5.1.4 Coordinate Referencing System Say you have data you need to make spatial with a spatial reference sierra &lt;- read_csv(\"sierraClimate.csv\") EPSG or CRS codes are an easy way to provide coordinate referencing. Two ways of doing the same thing. Spell it out: GCS &lt;- &quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&quot; wsta = st_as_sf(sierra, coords = c(&quot;LONGITUDE&quot;,&quot;LATITUDE&quot;), crs=GCS) Google to find the code you need and assign it to the crs parameter: wsta &lt;- st_as_sf(sierra, coords = c(\"LONGITUDE\",\"LATITUDE\"), crs=4326) 5.1.4.1 Removing Geometry There are many instances where you want to remove geometry from a sf data frame Some R functions run into problems with geometry and produce confusing error messages, like non-numeric argument Youre wanting to work with an sf data frame in a non-spatial way One way to remove geometry: myNonSFdf &lt;- mySFdf %&gt;% st_set_geometry(NULL) 5.1.5 Spatial join st_join A spatial join with st_join joins data from census where TRI points occur [air_quality] TRI_sp &lt;- st_as_sf(TRI_2017_CA, coords = c(&quot;LONGITUDE&quot;, &quot;LATITUDE&quot;), crs=4326) %&gt;% st_join(BayAreaTracts) %&gt;% filter(CNTY_FIPS %in% c(&quot;013&quot;, &quot;095&quot;)) 5.1.6 Plotting maps in the base plot system There are various programs for creating maps from spatial data, and well look at a few after weve looked at rasters. As usual, the base plot system often does something useful when you give it data. plot(BayAreaCounties) And with just one variable: plot(BayAreaCounties[&quot;POP_SQMI&quot;]) Theres a lot more we could do with the base plot system, but well mostly focus on some better options in ggplot2 and tmap. 5.2 Raster GIS in R Simple Features are feature-based, of course, so its not surprising that sf doesnt have support for rasters. So well want to use the raster package. We can start by building one from scratch: library(raster) new_ras &lt;- raster(nrows = 10, ncols = 10, xmn = 0, xmx = 100, ymn = 0, ymx = 100, vals = 1:100) plot(new_ras) A bit of raster reading and map algebra with Marble Mountains elevation data [marbles] library(raster) rasPath &lt;- system.file(&quot;extdata&quot;,&quot;elev.tif&quot;, package=&quot;iGIScData&quot;) elev &lt;- raster(rasPath) slope &lt;- terrain(elev, opt=&quot;slope&quot;) aspect &lt;- terrain(elev, opt=&quot;aspect&quot;) slopeclasses &lt;-matrix(c(0,0.2,1, 0.2,0.4,2, 0.4,0.6,3, 0.6,0.8,4, 0.8,1,5), ncol=3, byrow=TRUE) slopeclass &lt;- reclassify(slope, rcl = slopeclasses) plot(elev) plot(slope) plot(slopeclass) plot(aspect) Sinking Cove, Tennessee is a karst valley system carved into the Cumberland Plateau, a nice place to see the use of a hillshade raster created from a digital elevation model using raster functions for slope, aspect, and hillshade: library(sf); library(tidyverse); library(tmap) library(raster) tmap_mode(&quot;plot&quot;) DEMpath &lt;- system.file(&quot;extdata/SinkingCove&quot;,&quot;DEM_SinkingCoveUTM.tif&quot;,package=&quot;iGIScData&quot;) DEM &lt;- raster(DEMpath) slope &lt;- terrain(DEM, opt=&#39;slope&#39;) aspect &lt;- terrain(DEM, opt=&#39;aspect&#39;) hillsh &lt;- hillShade(slope, aspect, 40, 330) # # Need to crop a bit since grid north != true north bbox0 &lt;- st_bbox(DEM) xrange &lt;- bbox0$xmax - bbox0$xmin yrange &lt;- bbox0$ymax - bbox0$ymin bbox1 &lt;- bbox0 crop &lt;- 0.05 bbox1[1] &lt;- bbox0[1] + crop * xrange # xmin bbox1[3] &lt;- bbox0[3] - crop * xrange # xmax bbox1[2] &lt;- bbox0[2] + crop * yrange # ymin bbox1[4] &lt;- bbox0[4] - crop * yrange # ymax bboxPoly &lt;- bbox1 %&gt;% st_as_sfc() # makes a polygon # tm_shape(hillsh, bbox=bboxPoly) + tm_raster(palette=&quot;-Greys&quot;,legend.show=F,n=20) + tm_shape(DEM) + tm_raster(palette=terrain.colors(24), alpha=0.5) + tm_graticules(lines=F) See ?raster to learn more about the rich array of raster GIS operations. 5.3 ggplot2 for maps The Grammar of Graphics is the gg of ggplot. Key concept is separating aesthetics from data Aesthetics can come from variables (using aes()setting) or be constant for the graph Mapping tools that follow this lead ggplot, as we have seen, and it continues to be enhanced tmap (Thematic Maps) https://github.com/mtennekes/tmap Tennekes, M., 2018, tmap: Thematic Maps in R, Journal of Statistical Software 84(6), 1-39 ggplot(CA_counties) + geom_sf() Try ?geom_sf and youll find that its first parameters is mapping with aes() by default. The data property is inherited from the ggplot call, but commonly youll want to specify data=something in your geom_sf call. Another simple ggplot, with labels ggplot(CA_counties) + geom_sf() + geom_sf_text(aes(label = NAME), size = 1.5) and now with fill color ggplot(CA_counties) + geom_sf(aes(fill = MED_AGE)) + geom_sf_text(aes(label = NAME), col=&quot;white&quot;, size=1.5) Repositioned legend, no x or y labels ggplot(CA_counties) + geom_sf(aes(fill=MED_AGE)) + geom_sf_text(aes(label = NAME), col=&quot;white&quot;, size=1.5) + theme(legend.position = c(0.8, 0.8)) + labs(x=&quot;&quot;,y=&quot;&quot;) Map in ggplot2, zoomed into two counties [air_quality]: (Toxic Release Inventory (TRI) Program, n.d.) library(tidyverse); library(sf); library(iGIScData) census &lt;- BayAreaTracts %&gt;% filter(CNTY_FIPS %in% c(&quot;013&quot;, &quot;095&quot;)) TRI &lt;- TRI_2017_CA %&gt;% st_as_sf(coords = c(&quot;LONGITUDE&quot;, &quot;LATITUDE&quot;), crs=4326) %&gt;% st_join(census) %&gt;% filter(CNTY_FIPS %in% c(&quot;013&quot;, &quot;095&quot;), (`5.1_FUGITIVE_AIR` + `5.2_STACK_AIR`) &gt; 0) bnd = st_bbox(census) ggplot() + geom_sf(data = BayAreaCounties, aes(fill = NAME)) + geom_sf(data = census, color=&quot;grey40&quot;, fill = NA) + geom_sf(data = TRI) + coord_sf(xlim = c(bnd[1], bnd[3]), ylim = c(bnd[2], bnd[4])) + labs(title=&quot;Census Tracts and TRI air-release sites&quot;) + theme(legend.position = &quot;none&quot;) 5.3.1 Rasters in ggplot2 Raster display in ggplot2 is currently a little awkward, as are rasters in general in the feature-dominated GIS world. We can use a trick: converting rasters to a grid of points [marbles: library(tidyverse) library(sf) library(raster) rasPath &lt;- system.file(&quot;extdata&quot;,&quot;elev.tif&quot;, package=&quot;iGIScData&quot;) elev &lt;- raster(rasPath) shpPath &lt;- system.file(&quot;extdata&quot;,&quot;trails.shp&quot;, package=&quot;iGIScData&quot;) trails &lt;- st_read(shpPath) ## Reading layer `trails&#39; from data source `C:\\Users\\900008452\\Documents\\R\\win-library\\4.0\\iGIScData\\extdata\\trails.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 32 features and 8 fields ## Geometry type: LINESTRING ## Dimension: XY ## Bounding box: xmin: 481903.8 ymin: 4599196 xmax: 486901.9 ymax: 4603200 ## Projected CRS: NAD83 / UTM zone 10N elevpts = as.data.frame(rasterToPoints(elev)) ggplot() + geom_raster(data = elevpts, aes(x = x, y = y, fill = elev)) + geom_sf(data = trails) 5.4 tmap Basic building block is tm_shape(data) followed by various layer elements such as tm_fill() shape can be features or raster. See Geocomputation with R Chapter 8 Making Maps with R for more information. https://geocompr.robinlovelace.net/adv-map.html library(spData) library(tmap) tm_shape(world) + tm_fill() + tm_borders() Color by variable [air_quality] library(sf) library(tmap) tm_shape(BayAreaTracts) + tm_fill(col = &quot;MED_AGE&quot;) tmap of sierraFeb with hillshade and point symbols [sierra] library(tmap) library(sf) library(raster) library(iGIScData) tmap_mode(&quot;plot&quot;) tmap_options(max.categories = 8) sierra &lt;- st_as_sf(sierraFeb, coords = c(&quot;LONGITUDE&quot;, &quot;LATITUDE&quot;), crs = 4326) rasPath &lt;- system.file(&quot;extdata&quot;,&quot;ca_hillsh_WGS84.tif&quot;, package=&quot;iGIScData&quot;) hillsh &lt;- raster(rasPath) bounds &lt;- st_bbox(sierra) tm_shape(hillsh,bbox=bounds)+ tm_raster(palette=&quot;-Greys&quot;,legend.show=FALSE,n=10) + tm_shape(sierra) + tm_symbols(col=&quot;TEMPERATURE&quot;, palette=c(&quot;blue&quot;,&quot;red&quot;), style=&quot;cont&quot;,n=8) + tm_legend() + tm_layout(legend.position=c(&quot;RIGHT&quot;,&quot;TOP&quot;)) Note: -Greys needed to avoid negative image, since Greys go from light to dark, and to match reflectance as with b&amp;w photography, they need to go from dark to light. UpperSinkingCoveKarst From a hydrologic and geochemical study of a fluviokarstic valley system in Tennessee (Davis and Brook 1993): library(sf); library(tidyverse); library(readxl); library(tmap) wChemData &lt;- read_excel(system.file(&quot;extdata/SinkingCove&quot;,&quot;SinkingCoveWaterChem.xlsx&quot;, package=&quot;iGIScData&quot;)) %&gt;% mutate(siteLoc = str_sub(Site,start=1L, end=1L)) wChemTrunk &lt;- wChemData %&gt;% filter(siteLoc == &quot;T&quot;) %&gt;% mutate(siteType = &quot;trunk&quot;) wChemDrip &lt;- wChemData %&gt;% filter(siteLoc %in% c(&quot;D&quot;,&quot;S&quot;)) %&gt;% mutate(siteType = &quot;dripwater&quot;) wChemTrib &lt;- wChemData %&gt;% filter(siteLoc %in% c(&quot;B&quot;, &quot;F&quot;, &quot;K&quot;, &quot;W&quot;, &quot;P&quot;)) %&gt;% mutate(siteType = &quot;tributary&quot;) wChemData &lt;- bind_rows(wChemTrunk, wChemDrip, wChemTrib) sites &lt;- read_csv(system.file(&quot;extdata/SinkingCove&quot;, &quot;SinkingCoveSites.csv&quot;, package=&quot;iGIScData&quot;)) wChem &lt;- wChemData %&gt;% left_join(sites, by = c(&quot;Site&quot; = &quot;site&quot;)) %&gt;% st_as_sf(coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) library(raster) tmap_mode(&quot;plot&quot;) DEMpath &lt;- system.file(&quot;extdata/SinkingCove&quot;,&quot;DEM_SinkingCoveUTM.tif&quot;,package=&quot;iGIScData&quot;) DEM &lt;- raster(DEMpath) slope &lt;- terrain(DEM, opt=&#39;slope&#39;) aspect &lt;- terrain(DEM, opt=&#39;aspect&#39;) hillsh &lt;- hillShade(slope, aspect, 40, 330) bounds &lt;- st_bbox(wChem) xrange &lt;- bounds$xmax - bounds$xmin yrange &lt;- bounds$ymax - bounds$ymin xMIN &lt;- as.numeric(bounds$xmin - xrange/10) xMAX &lt;- as.numeric(bounds$xmax + xrange/10) yMIN &lt;- as.numeric(bounds$ymin - yrange/10) yMAX &lt;- as.numeric(bounds$ymax + yrange/10) #st_bbox(c(xmin = 16.1, xmax = 16.6, ymax = 48.6, ymin = 47.9), crs = st_crs(4326)) newbounds &lt;- st_bbox(c(xmin=xMIN, xmax=xMAX, ymin=yMIN, ymax=yMAX), crs= st_crs(4326)) tm_shape(hillsh,bbox=newbounds) + tm_raster(palette=&quot;-Greys&quot;,legend.show=F,n=20) + tm_shape(DEM) + tm_raster(palette=terrain.colors(24), alpha=0.5,legend.show=F) + tm_shape(wChem) + tm_symbols(size=&quot;TH&quot;, col=&quot;Lithology&quot;, scale=2, shape=&quot;siteType&quot;) + #tm_legend(legend.outside = T) + tm_layout(legend.position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_graticules(lines=F) 5.5 Interactive Maps The word static in static maps isnt something you would have heard in a cartography class 30 years ago, since essentially all maps then were static. Very important in designing maps is considering your audience, and one characteristic of the audience of those maps of yore were that they were printed and thus fixed on paper. A lot of cartographic design relates to that property: Figure-to-ground relationships assume ground is a white piece of paper (or possibly a standard white background in a pdf), so good cartographic color schemes tend to range from light for low values to dark for high values. Scale is fixed and there are no tools for changing scale, so a lot of attention must be paid to providing scale information. Similarly, without the ability to see the map at different scales, inset maps are often needed to provide context. Interactive maps change the game in having tools for changing scale, and always being printed on a computer or device where the color of the background isnt necessarily white. We are increasingly used to using interactive maps on our phones or other devices, and often get frustrated not being able to zoom into a static map. A widely used interactive mapping system is Leaflet, but were going to use tmap to access Leaflet behind the scenes and allow us to create maps with one set of commands. The key parameter needed is tmap_mode which must be set to view to create an interactive map. [UpperSinkingCoveKarst] With an interactive map, we do have the advantage of a good choice of base maps and the ability to resize and explore the map, but symbology is more limited, mostly just color and size, with only one variable in a legend. tmap_mode(&quot;view&quot;) bounds &lt;- st_bbox() wChem2map &lt;- filter(wChem, Month == 8) minVal &lt;- min(wChem2map$TH); maxVal &lt;- max(wChem2map$TH) tm_basemap(leaflet::providers$Esri.WorldTopoMap) + tm_shape(wChem2map) + tm_symbols(col=&quot;siteType&quot;, size=&quot;TH&quot;, scale=2) + tm_layout(title=paste(&quot;Total Hardness &quot;,as.character(minVal),&quot;-&quot;,as.character(maxVal),&quot; mg/L&quot;, sep=&quot;&quot;)) tm_basemap(leaflet::providers$Esri.WorldTopoMap) + tm_shape(wChem2map) + tm_symbols(col=&quot;Lithology&quot;, size=&quot;TH&quot;, scale=2) [air_quality] tmap_mode(&quot;view&quot;) tm_shape(BayAreaTracts) + tm_fill(col = &quot;MED_AGE&quot;, alpha = 0.5) [sierra] library(tmap) library(sf) tmap_mode(&quot;view&quot;) tmap_options(max.categories = 8) sierra &lt;- st_as_sf(sierraFeb, coords = c(&quot;LONGITUDE&quot;, &quot;LATITUDE&quot;), crs = 4326) bounds &lt;- st_bbox(sierra) tm_basemap(leaflet::providers$Esri.NatGeoWorldMap) + tm_shape(sierra) + tm_symbols(col=&quot;TEMPERATURE&quot;, palette=c(&quot;blue&quot;,&quot;red&quot;), style=&quot;cont&quot;,n=8,size=0.2) + tm_legend() + tm_layout(legend.position=c(&quot;RIGHT&quot;,&quot;TOP&quot;)) [landslides] slideCentroids.shp crs = 26910 5.5.0.1 Leaflet Now that weve seen an app that used it, lets look briefly at Leaflet itself, and well see that even the Leaflet package in R actually uses JavaScript Leaflet is designed as An open-source JavaScript library for mobile-friendly interactive maps https://leafletjs.com The R package leaflet is an interface to the JavaScript library Leaflet to create interactive web maps. It was developed on top of the htmlwidgets framework, which means the maps can be rendered in RMarkdown (v2) documents (which is why you can see it in this document), Shiny apps, and RStudio IDE / the R console. https://blog.rstudio.com/2015/06/24/leaflet-interactive-web-maps-with-r/ https://github.com/rstudio/cheatsheets/blob/master/leaflet.pdf library(leaflet) m &lt;- leaflet() %&gt;% addTiles() %&gt;% # default OpenStreetMap tiles addMarkers(lng=174.768, lat=-36.852, popup=&quot;The birthplace of R&quot;) m 5.6 Exercises Using the method of building simple sf geometries, build a simple 1x1 square object and plot it. Remember that you have to close the polygon, so the first vertex is the same as the last (of 5) vertices. Provide your code only. Build a map in ggplot of Colorado, Wyoming, and Utah with these boundary vertices in GCS. As with the square, remember to close each figure, and assign the crs to what is needed for GCS: 4326. Submit map as exported plot, and code in the submittal text block. [westUS] Colorado: (-109,41),(-102,41),(-102,37),(-109,37) Wyoming: (-111,45),(-104,45),(-104,41),(-111,41) Utah: (-114,42),(-111,42),(-111,41),(-109,41),(-109,37),(-114,37) Arizona: (-114,37),(-109,37),(-109,31.3),(-111,31.3),(-114.8,32.5), (-114.6,32.7),(-114.1,34.3),(-114.5,35),(-114.5,36),(-114,36) New Mexico: (-109,37),(-103,37),(-103,32),(-106.6,32),(-106.5,31.8), (-108.2,31.8),(-108.2,31.3),(-109,31.3) Add in the code for CA and NV and create kind of a western US map Create an sf class from the seven states adding the fields name, abb, area_sqkm, and population, and create a map labeling with the name. Colorado, CO, 269837, 5758736 Wyoming, WY, 253600, 578759 Utah, UT, 84899, 3205958 Arizona, AZ, 295234, 7278717 New Mexico, NM, 314917, 2096829 California, CA, 423970, 39368078 Nevada, NV, 286382, 3080156 Create a tibble for the highest peaks in the 7 states, with the following names, elevations in m, longitude and latitude, and add them to that map: Wheeler Peak, 4011, -105.4, 36.5 Mt. Whitney, 4421, -118.2, 36.5 Boundary Peak, 4007, -118.35, 37.9 Kings Peak, 4120, -110.3, 40.8 Gannett Peak, 4209, -109, 43.2 Mt. Elbert, 4401, -106.4, 39.1 Humphreys Peak, 3852, -111.7, 35.4 Note: the easiest way to do this is with the tribble function, starting with: peaks &lt;- tribble( ~peak, ~elev, ~longitude, ~latitude, &quot;Wheeler Peak&quot;, 4011, -105.4, 36.5, Use a spatial join to add the points to the states to provide a new attribute maximum elevation, and display that using geom_sf_text() with the state polygons. From the CA_counties and CAfreeways feature data in iGIScData, make a simple map in ggplot, with freeways colored red. After adding the raster library, create a raster from the built-in volcano matrix of elevations from Aucklands Maunga Whau Volcano, and use plot() to display it. Wed do more with that dataset but we dont know what the cell size is. Use tmap to create a simple map from the SW_States (polygons) and peaksp (points) data we created earlier. Hints: youll want to use tm_text with text set to peak to label the points, along with the parameter auto.placement=TRUE. [westUS] Change the map to the view mode, but dont use the state borders since the basemap will have them. Just before adding shapes, set the basemap to leaflet::providers$Esri.NatGeoWorldMap, then continue to the peaks after the + to see the peaks on a National Geographic basemap. "]]
