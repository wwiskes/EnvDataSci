[["time-series.html", "8 Time Series 8.1 Decomposing time series", " 8 Time Series plot(stl(co2, s.window = &quot;periodic&quot;)) # co2 is already a time series A time series (ts) is created with the ts() function. the time unit can be anything  not actually saved with the ts observations must be a regularly spaced series library(tidyverse) SFhighF &lt;- c(58,61,62,63,64,67,67,68,71,70,64,58) SFlowF &lt;- c(47,48,49,50,51,53,54,55,56,55,51,47) SFhighC &lt;- (SFhighF-32)*5/9 SFlowC &lt;- (SFlowF-32)*5/9 SFtempC &lt;- bind_cols(high=SFhighC,low=SFlowC) plot(SFtempC); plot(ts(SFtempC)) 8.0.1 frequency setting Frequency setting is a key parameter for ts() sets how many observations per time unit ts() mostly doesnt seem to care what the time unit is, however some functions figure it out, at least for an annual time unit, e.g. that 1-12 means months when theres a frequency of 12 plot(ts(SFtempC, frequency=1), main=&quot;monthly time unit&quot;) plot(ts(SFtempC, frequency=12), main=&quot;yearly time unit&quot;) frequency &lt; 1 If you have data of lower frequency than 1 per unit e.g. greenhouse gas data values every 20 years, starting in year 20, frequency 1/20 = 0.05 library(dslabs) data(&quot;greenhouse_gases&quot;) GHGwide &lt;- pivot_wider(greenhouse_gases, names_from = gas, values_from = concentration) GHG &lt;- ts(GHGwide, frequency=0.05, start=20) plot(GHG) start and end parameters the time of the first (start) and last (end) observations. Either a single number or a vector of two numbers (the second of which is an integer), which specify a natural time unit and a (1-based) number of samples into the time unit. Example with year as the time unit and monthly data, starting July 2019 and ending June 2020: frequency=12, start=c(2019,7), end=c(2020,6) 8.0.2 moving average (ma) Simple generalization of sequential data The order parameter is how many values are averaged in the moving window should be an odd number library(forecast) ts(SFtempC, frequency=12) ## high low ## Jan 1 14.44444 8.333333 ## Feb 1 16.11111 8.888889 ## Mar 1 16.66667 9.444444 ## Apr 1 17.22222 10.000000 ## May 1 17.77778 10.555556 ## Jun 1 19.44444 11.666667 ## Jul 1 19.44444 12.222222 ## Aug 1 20.00000 12.777778 ## Sep 1 21.66667 13.333333 ## Oct 1 21.11111 12.777778 ## Nov 1 17.77778 10.555556 ## Dec 1 14.44444 8.333333 ma(ts(SFtempC,frequency=12),order=3) ## [,1] [,2] ## Jan 1 NA NA ## Feb 1 15.74074 8.888889 ## Mar 1 16.66667 9.444444 ## Apr 1 17.22222 10.000000 ## May 1 18.14815 10.740741 ## Jun 1 18.88889 11.481481 ## Jul 1 19.62963 12.222222 ## Aug 1 20.37037 12.777778 ## Sep 1 20.92593 12.962963 ## Oct 1 20.18519 12.222222 ## Nov 1 17.77778 10.555556 ## Dec 1 NA NA moving average of CO2 data Difference shows time-local fluctuations, a component of the data library(dslabs) data(&quot;greenhouse_gases&quot;) GHGwide &lt;- pivot_wider(greenhouse_gases, names_from = gas, values_from = concentration) CO2 &lt;- ts(GHGwide$CO2, frequency = 0.05) library(forecast) CO2ma &lt;- ma(CO2, order=7) plot(CO2) plot(CO2ma) plot(CO2-CO2ma) 8.0.3 loess (local regression) smoothing [place holder  need to work out] From: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/loess Local Polynomial Regression Fitting Fit a polynomial surface determined by one or more numerical predictors, using local fitting. From: http://r-statistics.co/Loess-Regression-With-R.html a non-parametric approach that fits regressions within local neighborhoods if X variables are bound within a range [?] 8.1 Decomposing time series : separating a time series into its constituent components original data trend component, removes seasonal and remainder if seasonal, also a seasonal component. Note that season relates to the time unit. If 1 year, seasonality refers to the normal usage of seasons over a year. But if 1 day, seasons refers to different parts of a day, etc. irregular random remainder (time-local variation) Mauna Loa CO2 data with seasonality A good place to see the effect of seasonality is to look at the Mauna Loa CO2 data, which shows regular annual cycles, yet with a regularly increasing trend over the years. The decomposition shows the original observations, followed by a trend line that removes the seasonal and local (short-term) random irregularities, a detrended seasonal picture which removes that trend to just show the seasonal cycles, followed by the random irregularities. Note the vertical scale: the units are all the same  parts per million  so the amplitude of the seasonal chart should be the same as the annual amplitude of the observations, its just scaled to the chart height, which tends to exaggerate the seasonal cycles and random irregularities. plot(decompose(co2)) Figure 8.1: Decomposition of Mauna Loa monthly co2 time series (in base) extending from 1959 to 1981 "]]
